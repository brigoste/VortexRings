import Plots
using LinearAlgebra

function displacement_Finder(p1, p2)
    #Finds disptance between 2 vortecies
    t1 = p1[1] - p2[1]
    t2 = p1[2] - p2[2]
    disp = sqrt(t1^2 + t2^2)

    return disp
end

function velocity_Calculation(Gamma, r, r_mag)
    #V = (Gamma x r) / (2*pi*r_mag)
    num = cross(Gamma, r)
    denom = 2*pi*(r_mag^2)
    Vel = num/denom

    return Vel
end

function main()
    gamma_Test = [1 0 0]; #Circulation vector
    d_Test = 1.0;       #Initial distance between vortecies
    dt = 0.01;          #time step change
    #Arrays holding the positions of the vortexes over time, initialized to 0.
    pos1 = zeros(4000)
    pos2 = zeros(4000)
    pos3 = zeros(4000)
    pos4 = zeros(4000)
    time = zeros(4000)

    #Initial Vortex positions, named topleft moving counerclockwise
    p1 = [0, d_Test/2]
    p2 = [0, -d_Test/2]
    p3 = [1, -d_Test/2]
    p4 = [1, d_Test/2]

    #inititial velocities of the 4 vortex centers (v_x, v_y)
    v1_init = [0,0,0]
    v2_init = [0,0,0]
    v3_init = [0,0,0]
    v4_init = [0,0,0]

    for x = 1:4000
        #adds values to the time array, used to plot
        time[x] = (x-1)*dt

        #adds new position to the array
        pos1[x] = p1
        pos2[x] = p2
        pos3[x] = p3
        pos4[x] = p4

        #Vectors between Vortecies
        p1_2 = p2-p1
        p1_3 = p3-p1
        p1_4 = p4-p1
        p2_1 = p1-p2
        p2_3 = p3-p2
        p2_4 = p4-p2
        p3_1 = p1-p3
        p3_2 = p2-p3
        p3_4 = p4-p3
        p4_1 = p1-p4
        p4_2 = p2-p4
        p4_3 = p3-p4

        #Distance between each vortex
        d1_2 = displacement_Finder(p1, p2)
        d1_3 = displacement_Finder(p1, p3)
        d1_4 = displacement_Finder(p1, p4)
        d2_3 = displacement_Finder(p2, p3)
        d2_4 = displacement_Finder(p2, p4)
        d3_4 = displacement_Finder(p3, p4)

        #Calculating The Velocity Changes imposed by each other vortex
        #These give vector results
        v1_2 = velocity_Calculation(gamma_Test, p1_2, d1_2)
        v1_3 = velocity_Calculation(gamma_Test, p1_3, d1_3)
        v1_4 = velocity_Calculation(gamma_Test, p1_4, d1_4)
        v1_Influence = v1_2 + v1_3 + v1_4

        v2_1 = velocity_Calculation(gamma_Test, p2_1, d1_2)
        v2_3 = velocity_Calculation(gamma_Test, p2_3, d2_3)
        v2_4 = velocity_Calculation(gamma_test, p2_4, d2_4)
        v2_Influence = v2_1 + v2_3 + v2_4

        v3_1 = velocity_Calculation(gamma_Test, p3_1, d1_3)
        v3_2 = velocity_Calculation(gamma_Test, p3_2, d2_3)
        v3_4 = velocity_Calculation(gamm_Test, p3_4, d3_4)
        v3_Influence = v3_1 + v3_2 + v3_4

        v4_1 = velocity_Calculation(gamma_Test, p4_1, d1_4)
        v4_2 = velocity_Calculation(gamma_Test, p4_2, d2_4)
        v4_3 = velocity_Calculation(gamma_Test, p4_3, d3_4)
        v4_Influence = v4_1 + v4_2 + v4_3

        #Update position of the vortecies using a linear approximation of their influenced velocities.
        p1 = p1 + (v1_Influence * dt)
        p2 = p2 + (v2_influence * dt)
        p3 = p3 + (v3_Influence * dt)
        p4 = p4 + (v4_Influence * dt)
    end

    #Should I add in the code below?
    # time[4001] = dt*4001
    # pos1[4001] = p1
    # pos2[4001] = p2
    # pos3[4001] = p3
    # pos4[4001] = p4

    Plots.plot(time, pos1, "b-", time, pos2, "g-", time, pos3, "g-", time, pos4, "b-")
end
